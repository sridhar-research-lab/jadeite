digraph "" {
    "r0 := @this: MovingText"
    "load.r r0"
    "r0 := @this: MovingText"->"load.r r0";
    "load.r r0"->"load.r r0";
    "virtualinvoke <java.awt.Component: java.awt.Dimension getSize()>"
    "load.r r0"->"virtualinvoke <java.awt.Component: java.awt.Dimension getSize()>";
    "fieldget <java.awt.Dimension: int width>"
    "virtualinvoke <java.awt.Component: java.awt.Dimension getSize()>"->"fieldget <java.awt.Dimension: int width>";
    "fieldput <MovingText: int w>"
    "fieldget <java.awt.Dimension: int width>"->"fieldput <MovingText: int w>";
    "fieldput <MovingText: int w>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "load.r r0"->"virtualinvoke <java.awt.Component: java.awt.Dimension getSize()>";
    "fieldget <java.awt.Dimension: int height>"
    "virtualinvoke <java.awt.Component: java.awt.Dimension getSize()>"->"fieldget <java.awt.Dimension: int height>";
    "fieldput <MovingText: int h>"
    "fieldget <java.awt.Dimension: int height>"->"fieldput <MovingText: int h>";
    "fieldput <MovingText: int h>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "load.r r0"->"load.r r0";
    "fieldget <MovingText: int w>"
    "load.r r0"->"fieldget <MovingText: int w>";
    "fieldget <MovingText: int w>"->"load.r r0";
    "fieldget <MovingText: int h>"
    "load.r r0"->"fieldget <MovingText: int h>";
    "virtualinvoke <java.awt.Component: java.awt.Image createImage(int,int)>"
    "fieldget <MovingText: int h>"->"virtualinvoke <java.awt.Component: java.awt.Image createImage(int,int)>";
    "fieldput <MovingText: java.awt.Image memoryImage>"
    "virtualinvoke <java.awt.Component: java.awt.Image createImage(int,int)>"->"fieldput <MovingText: java.awt.Image memoryImage>";
    "fieldput <MovingText: java.awt.Image memoryImage>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "fieldget <MovingText: java.awt.Image memoryImage>"
    "load.r r0"->"fieldget <MovingText: java.awt.Image memoryImage>";
    "virtualinvoke <java.awt.Image: java.awt.Graphics getGraphics()>"
    "fieldget <MovingText: java.awt.Image memoryImage>"->"virtualinvoke <java.awt.Image: java.awt.Graphics getGraphics()>";
    "fieldput <MovingText: java.awt.Graphics memoryGraphics>"
    "virtualinvoke <java.awt.Image: java.awt.Graphics getGraphics()>"->"fieldput <MovingText: java.awt.Graphics memoryGraphics>";
    "fieldput <MovingText: java.awt.Graphics memoryGraphics>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.awt.Color getBackgroundColor()>"
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getBackgroundColor()>";
    "fieldput <MovingText: java.awt.Color bgColor>"
    "specialinvoke <MovingText: java.awt.Color getBackgroundColor()>"->"fieldput <MovingText: java.awt.Color bgColor>";
    "fieldput <MovingText: java.awt.Color bgColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.awt.Color getFontColor()>"
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getFontColor()>";
    "fieldput <MovingText: java.awt.Color fColor>"
    "specialinvoke <MovingText: java.awt.Color getFontColor()>"->"fieldput <MovingText: java.awt.Color fColor>";
    "fieldput <MovingText: java.awt.Color fColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.awt.Color getFontShadowColor()>"
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getFontShadowColor()>";
    "fieldput <MovingText: java.awt.Color shColor>"
    "specialinvoke <MovingText: java.awt.Color getFontShadowColor()>"->"fieldput <MovingText: java.awt.Color shColor>";
    "fieldput <MovingText: java.awt.Color shColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.awt.Color getBorderColor()>"
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getBorderColor()>";
    "fieldput <MovingText: java.awt.Color brColor>"
    "specialinvoke <MovingText: java.awt.Color getBorderColor()>"->"fieldput <MovingText: java.awt.Color brColor>";
    "fieldput <MovingText: java.awt.Color brColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getBackgroundColor()>";
    "fieldput <MovingText: java.awt.Color bgCurrentColor>"
    "specialinvoke <MovingText: java.awt.Color getBackgroundColor()>"->"fieldput <MovingText: java.awt.Color bgCurrentColor>";
    "fieldput <MovingText: java.awt.Color bgCurrentColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getFontColor()>";
    "fieldput <MovingText: java.awt.Color fCurrentColor>"
    "specialinvoke <MovingText: java.awt.Color getFontColor()>"->"fieldput <MovingText: java.awt.Color fCurrentColor>";
    "fieldput <MovingText: java.awt.Color fCurrentColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getFontShadowColor()>";
    "fieldput <MovingText: java.awt.Color shCurrentColor>"
    "specialinvoke <MovingText: java.awt.Color getFontShadowColor()>"->"fieldput <MovingText: java.awt.Color shCurrentColor>";
    "fieldput <MovingText: java.awt.Color shCurrentColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getBorderColor()>";
    "fieldput <MovingText: java.awt.Color brCurrentColor>"
    "specialinvoke <MovingText: java.awt.Color getBorderColor()>"->"fieldput <MovingText: java.awt.Color brCurrentColor>";
    "fieldput <MovingText: java.awt.Color brCurrentColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.awt.Color getBackgroundMouseColor()>"
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getBackgroundMouseColor()>";
    "fieldput <MovingText: java.awt.Color bgMouseColor>"
    "specialinvoke <MovingText: java.awt.Color getBackgroundMouseColor()>"->"fieldput <MovingText: java.awt.Color bgMouseColor>";
    "fieldput <MovingText: java.awt.Color bgMouseColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.awt.Color getFontMouseColor()>"
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getFontMouseColor()>";
    "fieldput <MovingText: java.awt.Color fMouseColor>"
    "specialinvoke <MovingText: java.awt.Color getFontMouseColor()>"->"fieldput <MovingText: java.awt.Color fMouseColor>";
    "fieldput <MovingText: java.awt.Color fMouseColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.awt.Color getFontShadowMouseColor()>"
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getFontShadowMouseColor()>";
    "fieldput <MovingText: java.awt.Color shMouseColor>"
    "specialinvoke <MovingText: java.awt.Color getFontShadowMouseColor()>"->"fieldput <MovingText: java.awt.Color shMouseColor>";
    "fieldput <MovingText: java.awt.Color shMouseColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.awt.Color getBorderMouseColor()>"
    "load.r r0"->"specialinvoke <MovingText: java.awt.Color getBorderMouseColor()>";
    "fieldput <MovingText: java.awt.Color brMouseColor>"
    "specialinvoke <MovingText: java.awt.Color getBorderMouseColor()>"->"fieldput <MovingText: java.awt.Color brMouseColor>";
    "fieldput <MovingText: java.awt.Color brMouseColor>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: int getDelay()>"
    "load.r r0"->"specialinvoke <MovingText: int getDelay()>";
    "fieldput <MovingText: int delay>"
    "specialinvoke <MovingText: int getDelay()>"->"fieldput <MovingText: int delay>";
    "fieldput <MovingText: int delay>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: boolean isBorder()>"
    "load.r r0"->"specialinvoke <MovingText: boolean isBorder()>";
    "fieldput <MovingText: boolean drawBorder>"
    "specialinvoke <MovingText: boolean isBorder()>"->"fieldput <MovingText: boolean drawBorder>";
    "fieldput <MovingText: boolean drawBorder>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: boolean isShadow()>"
    "load.r r0"->"specialinvoke <MovingText: boolean isShadow()>";
    "fieldput <MovingText: boolean drawShadow>"
    "specialinvoke <MovingText: boolean isShadow()>"->"fieldput <MovingText: boolean drawShadow>";
    "fieldput <MovingText: boolean drawShadow>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: boolean isBorderRounded()>"
    "load.r r0"->"specialinvoke <MovingText: boolean isBorderRounded()>";
    "fieldput <MovingText: boolean borderRounded>"
    "specialinvoke <MovingText: boolean isBorderRounded()>"->"fieldput <MovingText: boolean borderRounded>";
    "fieldput <MovingText: boolean borderRounded>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: boolean isStoppedByMouse()>"
    "load.r r0"->"specialinvoke <MovingText: boolean isStoppedByMouse()>";
    "fieldput <MovingText: boolean mouseOnFlag>"
    "specialinvoke <MovingText: boolean isStoppedByMouse()>"->"fieldput <MovingText: boolean mouseOnFlag>";
    "fieldput <MovingText: boolean mouseOnFlag>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: int getLeftMargin()>"
    "load.r r0"->"specialinvoke <MovingText: int getLeftMargin()>";
    "fieldput <MovingText: int lMargin>"
    "specialinvoke <MovingText: int getLeftMargin()>"->"fieldput <MovingText: int lMargin>";
    "fieldput <MovingText: int lMargin>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: int getRightMargin()>"
    "load.r r0"->"specialinvoke <MovingText: int getRightMargin()>";
    "fieldput <MovingText: int rMargin>"
    "specialinvoke <MovingText: int getRightMargin()>"->"fieldput <MovingText: int rMargin>";
    "fieldput <MovingText: int rMargin>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.awt.Font getFontData()>"
    "load.r r0"->"specialinvoke <MovingText: java.awt.Font getFontData()>";
    "fieldput <MovingText: java.awt.Font font>"
    "specialinvoke <MovingText: java.awt.Font getFontData()>"->"fieldput <MovingText: java.awt.Font font>";
    "fieldput <MovingText: java.awt.Font font>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.lang.String getUrlToGo()>"
    "load.r r0"->"specialinvoke <MovingText: java.lang.String getUrlToGo()>";
    "fieldput <MovingText: java.lang.String urlToGo>"
    "specialinvoke <MovingText: java.lang.String getUrlToGo()>"->"fieldput <MovingText: java.lang.String urlToGo>";
    "fieldput <MovingText: java.lang.String urlToGo>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.lang.String getImageToLoad()>"
    "load.r r0"->"specialinvoke <MovingText: java.lang.String getImageToLoad()>";
    "fieldput <MovingText: java.lang.String imageToLoad>"
    "specialinvoke <MovingText: java.lang.String getImageToLoad()>"->"fieldput <MovingText: java.lang.String imageToLoad>";
    "fieldput <MovingText: java.lang.String imageToLoad>"->"load.r r0";
    "fieldget <MovingText: java.awt.Graphics memoryGraphics>"
    "load.r r0"->"fieldget <MovingText: java.awt.Graphics memoryGraphics>";
    "fieldget <MovingText: java.awt.Graphics memoryGraphics>"->"load.r r0";
    "fieldget <MovingText: java.awt.Font font>"
    "load.r r0"->"fieldget <MovingText: java.awt.Font font>";
    "virtualinvoke <java.awt.Graphics: void setFont(java.awt.Font)>"
    "fieldget <MovingText: java.awt.Font font>"->"virtualinvoke <java.awt.Graphics: void setFont(java.awt.Font)>";
    "virtualinvoke <java.awt.Graphics: void setFont(java.awt.Font)>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "load.r r0"->"fieldget <MovingText: java.awt.Font font>";
    "specialinvoke <MovingText: void calculateFontSize(java.awt.Font)>"
    "fieldget <MovingText: java.awt.Font font>"->"specialinvoke <MovingText: void calculateFontSize(java.awt.Font)>";
    "specialinvoke <MovingText: void calculateFontSize(java.awt.Font)>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "specialinvoke <MovingText: java.lang.String getFileToRead()>"
    "load.r r0"->"specialinvoke <MovingText: java.lang.String getFileToRead()>";
    "fieldput <MovingText: java.lang.String textFileToRead>"
    "specialinvoke <MovingText: java.lang.String getFileToRead()>"->"fieldput <MovingText: java.lang.String textFileToRead>";
    "fieldput <MovingText: java.lang.String textFileToRead>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "fieldget <MovingText: int lMargin>"
    "load.r r0"->"fieldget <MovingText: int lMargin>";
    "fieldput <MovingText: int x>"
    "fieldget <MovingText: int lMargin>"->"fieldput <MovingText: int x>";
    "fieldput <MovingText: int x>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "load.r r0"->"fieldget <MovingText: int h>";
    "fieldget <MovingText: int h>"->"load.r r0";
    "fieldget <MovingText: int fHeight>"
    "load.r r0"->"fieldget <MovingText: int fHeight>";
    "add.i"
    "fieldget <MovingText: int fHeight>"->"add.i";
    "fieldput <MovingText: int y>"
    "add.i"->"fieldput <MovingText: int y>";
    "fieldput <MovingText: int y>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "virtualinvoke <java.awt.Component: void addMouseListener(java.awt.event.MouseListener)>"
    "load.r r0"->"virtualinvoke <java.awt.Component: void addMouseListener(java.awt.event.MouseListener)>";
    "return"
    "virtualinvoke <java.awt.Component: void addMouseListener(java.awt.event.MouseListener)>"->"return";
}
