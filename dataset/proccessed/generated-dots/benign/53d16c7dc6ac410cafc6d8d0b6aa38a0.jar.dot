digraph "" {
    "r0 := @this: jaek_graph"
    "load.r r0"
    "r0 := @this: jaek_graph"->"load.r r0";
    "push \"line.separator\""
    "load.r r0"->"push \"line.separator\"";
    "staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>"
    "push \"line.separator\""->"staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "fieldput <jaek_graph: java.lang.String linesep>"
    "staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>"->"fieldput <jaek_graph: java.lang.String linesep>";
    "fieldput <jaek_graph: java.lang.String linesep>"->"load.r r0";
    "staticget <java.awt.Color: java.awt.Color white>"
    "load.r r0"->"staticget <java.awt.Color: java.awt.Color white>";
    "virtualinvoke <java.awt.Component: void setBackground(java.awt.Color)>"
    "staticget <java.awt.Color: java.awt.Color white>"->"virtualinvoke <java.awt.Component: void setBackground(java.awt.Color)>";
    "push \"java.awt.Graphics2D\""
    "virtualinvoke <java.awt.Component: void setBackground(java.awt.Color)>"->"push \"java.awt.Graphics2D\"";
    "staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>"
    "push \"java.awt.Graphics2D\""->"staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "pop"
    "staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>"->"pop";
    "pop"->"load.r r0";
    "new jaek_graph$Util2"
    "load.r r0"->"new jaek_graph$Util2";
    "dup1.r"
    "new jaek_graph$Util2"->"dup1.r";
    "dup1.r"->"load.r r0";
    "push null"
    "load.r r0"->"push null";
    "specialinvoke <jaek_graph$Util2: void <init>(jaek_graph,jaek_graph$1)>"
    "push null"->"specialinvoke <jaek_graph$Util2: void <init>(jaek_graph,jaek_graph$1)>";
    "fieldput <jaek_graph: jaek_graph$Util u>"
    "specialinvoke <jaek_graph$Util2: void <init>(jaek_graph,jaek_graph$1)>"->"fieldput <jaek_graph: jaek_graph$Util u>";
    "fieldput <jaek_graph: jaek_graph$Util u>"->"load.r r0";
    "push 1"
    "load.r r0"->"push 1";
    "fieldput <jaek_graph: boolean bJava2>"
    "push 1"->"fieldput <jaek_graph: boolean bJava2>";
    "goto load.r r0"
    "fieldput <jaek_graph: boolean bJava2>"->"goto load.r r0";
    "goto load.r r0"->"load.r r0";
    "new jaek_graph$Graph"
    "load.r r0"->"new jaek_graph$Graph";
    "new jaek_graph$Graph"->"dup1.r";
    "dup1.r"->"load.r r0";
    "specialinvoke <jaek_graph$Graph: void <init>(jaek_graph)>"
    "load.r r0"->"specialinvoke <jaek_graph$Graph: void <init>(jaek_graph)>";
    "fieldput <jaek_graph: jaek_graph$Graph graph>"
    "specialinvoke <jaek_graph$Graph: void <init>(jaek_graph)>"->"fieldput <jaek_graph: jaek_graph$Graph graph>";
    "fieldput <jaek_graph: jaek_graph$Graph graph>"->"load.r r0";
    "new jaek_graph$ScrollableCanvas"
    "load.r r0"->"new jaek_graph$ScrollableCanvas";
    "new jaek_graph$ScrollableCanvas"->"dup1.r";
    "dup1.r"->"load.r r0";
    "load.r r0"->"push null";
    "specialinvoke <jaek_graph$ScrollableCanvas: void <init>(jaek_graph,jaek_graph$1)>"
    "push null"->"specialinvoke <jaek_graph$ScrollableCanvas: void <init>(jaek_graph,jaek_graph$1)>";
    "fieldput <jaek_graph: jaek_graph$ScrollableCanvas canvas>"
    "specialinvoke <jaek_graph$ScrollableCanvas: void <init>(jaek_graph,jaek_graph$1)>"->"fieldput <jaek_graph: jaek_graph$ScrollableCanvas canvas>";
    "fieldput <jaek_graph: jaek_graph$ScrollableCanvas canvas>"->"load.r r0";
    "new java.awt.BorderLayout"
    "load.r r0"->"new java.awt.BorderLayout";
    "new java.awt.BorderLayout"->"dup1.r";
    "specialinvoke <java.awt.BorderLayout: void <init>()>"
    "dup1.r"->"specialinvoke <java.awt.BorderLayout: void <init>()>";
    "virtualinvoke <java.awt.Container: void setLayout(java.awt.LayoutManager)>"
    "specialinvoke <java.awt.BorderLayout: void <init>()>"->"virtualinvoke <java.awt.Container: void setLayout(java.awt.LayoutManager)>";
    "virtualinvoke <java.awt.Container: void setLayout(java.awt.LayoutManager)>"->"load.r r0";
    "new java.awt.ScrollPane"
    "load.r r0"->"new java.awt.ScrollPane";
    "new java.awt.ScrollPane"->"dup1.r";
    "specialinvoke <java.awt.ScrollPane: void <init>()>"
    "dup1.r"->"specialinvoke <java.awt.ScrollPane: void <init>()>";
    "fieldput <jaek_graph: java.awt.ScrollPane scrollPane>"
    "specialinvoke <java.awt.ScrollPane: void <init>()>"->"fieldput <jaek_graph: java.awt.ScrollPane scrollPane>";
    "fieldput <jaek_graph: java.awt.ScrollPane scrollPane>"->"load.r r0";
    "fieldget <jaek_graph: java.awt.ScrollPane scrollPane>"
    "load.r r0"->"fieldget <jaek_graph: java.awt.ScrollPane scrollPane>";
    "fieldget <jaek_graph: java.awt.ScrollPane scrollPane>"->"load.r r0";
    "fieldget <jaek_graph: jaek_graph$ScrollableCanvas canvas>"
    "load.r r0"->"fieldget <jaek_graph: jaek_graph$ScrollableCanvas canvas>";
    "virtualinvoke <java.awt.Container: java.awt.Component add(java.awt.Component)>"
    "fieldget <jaek_graph: jaek_graph$ScrollableCanvas canvas>"->"virtualinvoke <java.awt.Container: java.awt.Component add(java.awt.Component)>";
    "virtualinvoke <java.awt.Container: java.awt.Component add(java.awt.Component)>"->"pop";
    "pop"->"load.r r0";
    "push \"Center\""
    "load.r r0"->"push \"Center\"";
    "push \"Center\""->"load.r r0";
    "load.r r0"->"fieldget <jaek_graph: java.awt.ScrollPane scrollPane>";
    "virtualinvoke <java.awt.Container: java.awt.Component add(java.lang.String,java.awt.Component)>"
    "fieldget <jaek_graph: java.awt.ScrollPane scrollPane>"->"virtualinvoke <java.awt.Container: java.awt.Component add(java.lang.String,java.awt.Component)>";
    "virtualinvoke <java.awt.Container: java.awt.Component add(java.lang.String,java.awt.Component)>"->"pop";
    "pop"->"load.r r0";
    "load.r r0"->"load.r r0";
    "push \"TOOLTIP\""
    "load.r r0"->"push \"TOOLTIP\"";
    "push \"TOOLTIP\""->"push 1";
    "virtualinvoke <jaek_graph: boolean parmBoolean(java.lang.String,boolean)>"
    "push 1"->"virtualinvoke <jaek_graph: boolean parmBoolean(java.lang.String,boolean)>";
    "fieldput <jaek_graph: boolean bTooltip>"
    "virtualinvoke <jaek_graph: boolean parmBoolean(java.lang.String,boolean)>"->"fieldput <jaek_graph: boolean bTooltip>";
    "fieldput <jaek_graph: boolean bTooltip>"->"load.r r0";
    "fieldget <jaek_graph: boolean bTooltip>"
    "load.r r0"->"fieldget <jaek_graph: boolean bTooltip>";
    "ifeq return"
    "fieldget <jaek_graph: boolean bTooltip>"->"ifeq return";
    "ifeq return"->"load.r r0";
    "load.r r0"->"fieldget <jaek_graph: jaek_graph$ScrollableCanvas canvas>";
    "new jaek_graph$mouseMot"
    "fieldget <jaek_graph: jaek_graph$ScrollableCanvas canvas>"->"new jaek_graph$mouseMot";
    "new jaek_graph$mouseMot"->"dup1.r";
    "dup1.r"->"load.r r0";
    "load.r r0"->"load.r r0";
    "fieldget <jaek_graph: jaek_graph$Graph graph>"
    "load.r r0"->"fieldget <jaek_graph: jaek_graph$Graph graph>";
    "staticinvoke <jaek_graph$Graph: jaek_graph$Lines access$3100(jaek_graph$Graph)>"
    "fieldget <jaek_graph: jaek_graph$Graph graph>"->"staticinvoke <jaek_graph$Graph: jaek_graph$Lines access$3100(jaek_graph$Graph)>";
    "specialinvoke <jaek_graph$mouseMot: void <init>(jaek_graph,jaek_graph$Lines)>"
    "staticinvoke <jaek_graph$Graph: jaek_graph$Lines access$3100(jaek_graph$Graph)>"->"specialinvoke <jaek_graph$mouseMot: void <init>(jaek_graph,jaek_graph$Lines)>";
    "virtualinvoke <java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>"
    "specialinvoke <jaek_graph$mouseMot: void <init>(jaek_graph,jaek_graph$Lines)>"->"virtualinvoke <java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>";
    "return"
    "virtualinvoke <java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>"->"return";
    "store.r $r19"
    "push 1"->"store.r $r19";
    "store.r $r19"->"load.r r0";
    "new jaek_graph$Util"
    "load.r r0"->"new jaek_graph$Util";
    "new jaek_graph$Util"->"dup1.r";
    "dup1.r"->"load.r r0";
    "load.r r0"->"push null";
    "specialinvoke <jaek_graph$Util: void <init>(jaek_graph,jaek_graph$1)>"
    "push null"->"specialinvoke <jaek_graph$Util: void <init>(jaek_graph,jaek_graph$1)>";
    "specialinvoke <jaek_graph$Util: void <init>(jaek_graph,jaek_graph$1)>"->"fieldput <jaek_graph: jaek_graph$Util u>";
    "fieldput <jaek_graph: jaek_graph$Util u>"->"load.r r0";
    "push 0"
    "load.r r0"->"push 0";
    "push 0"->"fieldput <jaek_graph: boolean bJava2>";
}
