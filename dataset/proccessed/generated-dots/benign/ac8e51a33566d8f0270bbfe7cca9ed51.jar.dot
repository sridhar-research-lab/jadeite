digraph "" {
    "r0 := @this: LED"
    "load.r r0"
    "r0 := @this: LED"->"load.r r0";
    "new java.awt.Color"
    "load.r r0"->"new java.awt.Color";
    "dup1.r"
    "new java.awt.Color"->"dup1.r";
    "push 100"
    "dup1.r"->"push 100";
    "push 100"->"push 100";
    "push 100"->"push 100";
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"
    "push 100"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "fieldput <LED: java.awt.Color highlight>"
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"fieldput <LED: java.awt.Color highlight>";
    "fieldput <LED: java.awt.Color highlight>"->"load.r r0";
    "push 9"
    "load.r r0"->"push 9";
    "newarray"
    "push 9"->"newarray";
    "fieldput <LED: java.awt.Color[] colors>"
    "newarray"->"fieldput <LED: java.awt.Color[] colors>";
    "fieldput <LED: java.awt.Color[] colors>"->"load.r r0";
    "fieldget <LED: java.awt.Color[] colors>"
    "load.r r0"->"fieldget <LED: java.awt.Color[] colors>";
    "push 0"
    "fieldget <LED: java.awt.Color[] colors>"->"push 0";
    "push 0"->"new java.awt.Color";
    "new java.awt.Color"->"dup1.r";
    "push 80"
    "dup1.r"->"push 80";
    "push 80"->"push 80";
    "push 80"->"push 80";
    "push 80"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "arraywrite.r"
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"arraywrite.r";
    "arraywrite.r"->"load.r r0";
    "load.r r0"->"fieldget <LED: java.awt.Color[] colors>";
    "push 1"
    "fieldget <LED: java.awt.Color[] colors>"->"push 1";
    "push 1"->"new java.awt.Color";
    "new java.awt.Color"->"dup1.r";
    "push 255"
    "dup1.r"->"push 255";
    "push 255"->"push 0";
    "push 0"->"push 0";
    "push 0"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"arraywrite.r";
    "arraywrite.r"->"load.r r0";
    "load.r r0"->"fieldget <LED: java.awt.Color[] colors>";
    "push 2"
    "fieldget <LED: java.awt.Color[] colors>"->"push 2";
    "push 2"->"new java.awt.Color";
    "new java.awt.Color"->"dup1.r";
    "push 130"
    "dup1.r"->"push 130";
    "push 130"->"push 255";
    "push 255"->"push 0";
    "push 0"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"arraywrite.r";
    "arraywrite.r"->"load.r r0";
    "load.r r0"->"fieldget <LED: java.awt.Color[] colors>";
    "push 3"
    "fieldget <LED: java.awt.Color[] colors>"->"push 3";
    "push 3"->"new java.awt.Color";
    "new java.awt.Color"->"dup1.r";
    "dup1.r"->"push 0";
    "push 0"->"push 130";
    "push 130"->"push 255";
    "push 255"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"arraywrite.r";
    "arraywrite.r"->"load.r r0";
    "load.r r0"->"fieldget <LED: java.awt.Color[] colors>";
    "push 4"
    "fieldget <LED: java.awt.Color[] colors>"->"push 4";
    "push 4"->"new java.awt.Color";
    "new java.awt.Color"->"dup1.r";
    "dup1.r"->"push 255";
    "push 255"->"push 255";
    "push 255"->"push 0";
    "push 0"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"arraywrite.r";
    "arraywrite.r"->"load.r r0";
    "load.r r0"->"fieldget <LED: java.awt.Color[] colors>";
    "push 5"
    "fieldget <LED: java.awt.Color[] colors>"->"push 5";
    "push 5"->"new java.awt.Color";
    "new java.awt.Color"->"dup1.r";
    "dup1.r"->"push 255";
    "push 160"
    "push 255"->"push 160";
    "push 160"->"push 0";
    "push 0"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"arraywrite.r";
    "arraywrite.r"->"load.r r0";
    "load.r r0"->"fieldget <LED: java.awt.Color[] colors>";
    "push 6"
    "fieldget <LED: java.awt.Color[] colors>"->"push 6";
    "push 6"->"new java.awt.Color";
    "new java.awt.Color"->"dup1.r";
    "dup1.r"->"push 255";
    "push 255"->"push 0";
    "push 0"->"push 255";
    "push 255"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"arraywrite.r";
    "arraywrite.r"->"load.r r0";
    "load.r r0"->"fieldget <LED: java.awt.Color[] colors>";
    "push 7"
    "fieldget <LED: java.awt.Color[] colors>"->"push 7";
    "push 7"->"new java.awt.Color";
    "new java.awt.Color"->"dup1.r";
    "dup1.r"->"push 255";
    "push 255"->"push 255";
    "push 255"->"push 255";
    "push 255"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"arraywrite.r";
    "arraywrite.r"->"load.r r0";
    "load.r r0"->"fieldget <LED: java.awt.Color[] colors>";
    "push 8"
    "fieldget <LED: java.awt.Color[] colors>"->"push 8";
    "push 8"->"new java.awt.Color";
    "new java.awt.Color"->"dup1.r";
    "dup1.r"->"push 0";
    "push 0"->"push 255";
    "push 255"->"push 255";
    "push 255"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
    "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"arraywrite.r";
    "arraywrite.r"->"load.r r0";
    "specialinvoke <LED: int getAttrs()>"
    "load.r r0"->"specialinvoke <LED: int getAttrs()>";
    "push -1"
    "specialinvoke <LED: int getAttrs()>"->"push -1";
    "ifcmpne.i load.r r0"
    "push -1"->"ifcmpne.i load.r r0";
    "ifcmpne.i load.r r0"->"load.r r0";
    "virtualinvoke <LED: void stop()>"
    "load.r r0"->"virtualinvoke <LED: void stop()>";
    "return"
    "virtualinvoke <LED: void stop()>"->"return";
    "ifcmpne.i load.r r0"->"load.r r0";
    "load.r r0"->"push 3";
    "push 3"->"load.r r0";
    "fieldget <LED: int border>"
    "load.r r0"->"fieldget <LED: int border>";
    "mul.i"
    "fieldget <LED: int border>"->"mul.i";
    "fieldput <LED: int offset>"
    "mul.i"->"fieldput <LED: int offset>";
    "fieldput <LED: int offset>"->"load.r r0";
    "load.r r0"->"push 1";
    "fieldput <LED: boolean beginning>"
    "push 1"->"fieldput <LED: boolean beginning>";
    "fieldput <LED: boolean beginning>"->"load.r r0";
    "load.r r0"->"push 1";
    "fieldput <LED: boolean init>"
    "push 1"->"fieldput <LED: boolean init>";
    "fieldput <LED: boolean init>"->"return";
}
