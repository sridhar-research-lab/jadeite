digraph "" {
    "r0 := @this: ImAlpha"
    "staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>"
    "r0 := @this: ImAlpha"->"staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "ifnonnull push 4"
    "staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>"->"ifnonnull push 4";
    "load.r r0"
    "ifnonnull push 4"->"load.r r0";
    "virtualinvoke <ImAlpha: void privileged()>"
    "load.r r0"->"virtualinvoke <ImAlpha: void privileged()>";
    "return"
    "virtualinvoke <ImAlpha: void privileged()>"->"return";
    "store.r r0"
    "virtualinvoke <ImAlpha: void privileged()>"->"store.r r0";
    "store.r r0"->"return";
    "push 4"
    "ifnonnull push 4"->"push 4";
    "push 168"
    "push 4"->"push 168";
    "mul.i"
    "push 168"->"mul.i";
    "store.i i2"
    "mul.i"->"store.i i2";
    "new ImAlpha$MyColorSpace"
    "store.i i2"->"new ImAlpha$MyColorSpace";
    "store.r $r10"
    "new ImAlpha$MyColorSpace"->"store.r $r10";
    "load.r $r10"
    "store.r $r10"->"load.r $r10";
    "load.r $r10"->"load.r r0";
    "push 0"
    "load.r r0"->"push 0";
    "push 0"->"load.r r0";
    "fieldget <ImAlpha: int[] soffsets>"
    "load.r r0"->"fieldget <ImAlpha: int[] soffsets>";
    "arraylength"
    "fieldget <ImAlpha: int[] soffsets>"->"arraylength";
    "push 1"
    "arraylength"->"push 1";
    "sub.i"
    "push 1"->"sub.i";
    "specialinvoke <ImAlpha$MyColorSpace: void <init>(ImAlpha,int,int)>"
    "sub.i"->"specialinvoke <ImAlpha$MyColorSpace: void <init>(ImAlpha,int,int)>";
    "new java.awt.image.ComponentColorModel"
    "specialinvoke <ImAlpha$MyColorSpace: void <init>(ImAlpha,int,int)>"->"new java.awt.image.ComponentColorModel";
    "store.r $r12"
    "new java.awt.image.ComponentColorModel"->"store.r $r12";
    "load.r $r12"
    "store.r $r12"->"load.r $r12";
    "load.r $r12"->"load.r $r10";
    "load.r $r10"->"push 1";
    "push 1"->"push 0";
    "push 0"->"push 1";
    "push 1"->"push 0";
    "specialinvoke <java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>"
    "push 0"->"specialinvoke <java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>";
    "new java.awt.image.ComponentSampleModel"
    "specialinvoke <java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>"->"new java.awt.image.ComponentSampleModel";
    "store.r $r13"
    "new java.awt.image.ComponentSampleModel"->"store.r $r13";
    "load.r $r13"
    "store.r $r13"->"load.r $r13";
    "load.r $r13"->"push 0";
    "push 0"->"push 168";
    "push 168"->"push 1";
    "push 1"->"push 4";
    "load.i i2"
    "push 4"->"load.i i2";
    "load.i i2"->"load.r r0";
    "load.r r0"->"fieldget <ImAlpha: int[] soffsets>";
    "specialinvoke <java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>"
    "fieldget <ImAlpha: int[] soffsets>"->"specialinvoke <java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>";
    "new ImAlpha$MyBufferedImage"
    "specialinvoke <java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>"->"new ImAlpha$MyBufferedImage";
    "new ImAlpha$MyBufferedImage"->"store.r $r10";
    "store.r $r10"->"load.r $r10";
    "load.r $r10"->"load.r r0";
    "load.r r0"->"push 168";
    "push 168"->"push 1";
    "push 6"
    "push 1"->"push 6";
    "push 6"->"push 0";
    "push 0"->"load.r $r12";
    "load.r $r12"->"load.r $r13";
    "specialinvoke <ImAlpha$MyBufferedImage: void <init>(ImAlpha,int,int,int,int,java.awt.image.ColorModel,java.awt.image.SampleModel)>"
    "load.r $r13"->"specialinvoke <ImAlpha$MyBufferedImage: void <init>(ImAlpha,int,int,int,int,java.awt.image.ColorModel,java.awt.image.SampleModel)>";
    "specialinvoke <ImAlpha$MyBufferedImage: void <init>(ImAlpha,int,int,int,int,java.awt.image.ColorModel,java.awt.image.SampleModel)>"->"push 0";
    "store.i $r12"
    "push 0"->"store.i $r12";
    "load.i $r12"
    "store.i $r12"->"load.i $r12";
    "load.i $r12"->"load.i i2";
    "ifcmpge.i new ImAlpha$MyColorSpace"
    "load.i i2"->"ifcmpge.i new ImAlpha$MyColorSpace";
    "ifcmpge.i new ImAlpha$MyColorSpace"->"load.r $r10";
    "virtualinvoke <java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>"
    "load.r $r10"->"virtualinvoke <java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>";
    "virtualinvoke <java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>"
    "virtualinvoke <java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>"->"virtualinvoke <java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>";
    "virtualinvoke <java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>"->"load.i $r12";
    "load.i $r12"->"push 1";
    "virtualinvoke <java.awt.image.DataBuffer: void setElem(int,int)>"
    "push 1"->"virtualinvoke <java.awt.image.DataBuffer: void setElem(int,int)>";
    "inc.i $r12 1"
    "virtualinvoke <java.awt.image.DataBuffer: void setElem(int,int)>"->"inc.i $r12 1";
    "goto load.i $r12"
    "inc.i $r12 1"->"goto load.i $r12";
    "ifcmpge.i new ImAlpha$MyColorSpace"->"new ImAlpha$MyColorSpace";
    "new ImAlpha$MyColorSpace"->"store.r $r12";
    "store.r $r12"->"load.r $r12";
    "load.r $r12"->"load.r r0";
    "load.r r0"->"push 0";
    "push 0"->"load.r r0";
    "fieldget <ImAlpha: int[] doffsets>"
    "load.r r0"->"fieldget <ImAlpha: int[] doffsets>";
    "fieldget <ImAlpha: int[] doffsets>"->"arraylength";
    "arraylength"->"push 1";
    "push 1"->"sub.i";
    "sub.i"->"specialinvoke <ImAlpha$MyColorSpace: void <init>(ImAlpha,int,int)>";
    "specialinvoke <ImAlpha$MyColorSpace: void <init>(ImAlpha,int,int)>"->"new java.awt.image.ComponentColorModel";
    "store.r i2"
    "new java.awt.image.ComponentColorModel"->"store.r i2";
    "load.r i2"
    "store.r i2"->"load.r i2";
    "load.r i2"->"load.r $r12";
    "load.r $r12"->"push 1";
    "push 1"->"push 0";
    "push 0"->"push 1";
    "push 1"->"push 0";
    "push 0"->"specialinvoke <java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>";
    "specialinvoke <java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>"->"new java.awt.image.ComponentSampleModel";
    "new java.awt.image.ComponentSampleModel"->"store.r $r13";
    "store.r $r13"->"load.r $r13";
    "load.r $r13"->"push 0";
    "push 0"->"push 168";
    "push 168"->"push 1";
    "push 1"->"push 1";
    "push 1"->"push 0";
    "push 0"->"load.r r0";
    "load.r r0"->"fieldget <ImAlpha: int[] doffsets>";
    "fieldget <ImAlpha: int[] doffsets>"->"specialinvoke <java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>";
    "specialinvoke <java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>"->"new ImAlpha$MyBufferedImage";
    "new ImAlpha$MyBufferedImage"->"store.r $r12";
    "store.r $r12"->"load.r $r12";
    "load.r $r12"->"load.r r0";
    "load.r r0"->"push 168";
    "push 168"->"push 1";
    "push 10"
    "push 1"->"push 10";
    "push 10"->"push 0";
    "push 0"->"load.r i2";
    "load.r i2"->"load.r $r13";
    "load.r $r13"->"specialinvoke <ImAlpha$MyBufferedImage: void <init>(ImAlpha,int,int,int,int,java.awt.image.ColorModel,java.awt.image.SampleModel)>";
    "new java.awt.image.ColorConvertOp"
    "specialinvoke <ImAlpha$MyBufferedImage: void <init>(ImAlpha,int,int,int,int,java.awt.image.ColorModel,java.awt.image.SampleModel)>"->"new java.awt.image.ColorConvertOp";
    "new java.awt.image.ColorConvertOp"->"store.r i2";
    "store.r i2"->"load.r i2";
    "push null"
    "load.r i2"->"push null";
    "specialinvoke <java.awt.image.ColorConvertOp: void <init>(java.awt.RenderingHints)>"
    "push null"->"specialinvoke <java.awt.image.ColorConvertOp: void <init>(java.awt.RenderingHints)>";
    "specialinvoke <java.awt.image.ColorConvertOp: void <init>(java.awt.RenderingHints)>"->"load.r r0";
    "virtualinvoke <ImAlpha: void spray()>"
    "load.r r0"->"virtualinvoke <ImAlpha: void spray()>";
    "virtualinvoke <ImAlpha: void spray()>"->"load.r i2";
    "load.r i2"->"load.r $r10";
    "load.r $r10"->"load.r $r12";
    "virtualinvoke <java.awt.image.ColorConvertOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>"
    "load.r $r12"->"virtualinvoke <java.awt.image.ColorConvertOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>";
    "pop"
    "virtualinvoke <java.awt.image.ColorConvertOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>"->"pop";
    "goto load.r r0"
    "pop"->"goto load.r r0";
    "goto load.r r0"->"load.r r0";
    "virtualinvoke <ImAlpha: void getBigArray()>"
    "load.r r0"->"virtualinvoke <ImAlpha: void getBigArray()>";
    "virtualinvoke <ImAlpha: void getBigArray()>"->"load.r r0";
    "virtualinvoke <ImAlpha: void getMemBase()>"
    "load.r r0"->"virtualinvoke <ImAlpha: void getMemBase()>";
    "virtualinvoke <ImAlpha: void getMemBase()>"->"load.r r0";
    "load.r r0"->"load.r r0";
    "push class \"Ljava/lang/System;\""
    "load.r r0"->"push class \"Ljava/lang/System;\"";
    "virtualinvoke <ImAlpha: long getAddress(java.lang.Object)>"
    "push class \"Ljava/lang/System;\""->"virtualinvoke <ImAlpha: long getAddress(java.lang.Object)>";
    "virtualinvoke <ImAlpha: long getAddress(java.lang.Object)>"->"load.r r0";
    "load.r r0"->"staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>"->"virtualinvoke <ImAlpha: long getAddress(java.lang.Object)>";
    "store.l l7"
    "virtualinvoke <ImAlpha: long getAddress(java.lang.Object)>"->"store.l l7";
    "push 4L"
    "store.l l7"->"push 4L";
    "add.l"
    "push 4L"->"add.l";
    "virtualinvoke <ImAlpha: int rdMem(long)>"
    "add.l"->"virtualinvoke <ImAlpha: int rdMem(long)>";
    "i2l"
    "virtualinvoke <ImAlpha: int rdMem(long)>"->"i2l";
    "store.l l23"
    "i2l"->"store.l l23";
    "store.l l23"->"push 0";
    "store.i $r10"
    "push 0"->"store.i $r10";
    "load.i $r10"
    "store.i $r10"->"load.i $r10";
    "push 2000000"
    "load.i $r10"->"push 2000000";
    "ifcmpge.i load.r r0"
    "push 2000000"->"ifcmpge.i load.r r0";
    "load.l l23"
    "ifcmpge.i load.r r0"->"load.l l23";
    "load.l l23"->"load.i $r10";
    "load.i $r10"->"push 4";
    "push 4"->"mul.i";
    "mul.i"->"i2l";
    "i2l"->"add.l";
    "store.l l8"
    "add.l"->"store.l l8";
    "store.l l8"->"load.r r0";
    "load.l l8"
    "load.r r0"->"load.l l8";
    "load.l l8"->"virtualinvoke <ImAlpha: int rdMem(long)>";
    "virtualinvoke <ImAlpha: int rdMem(long)>"->"i2l";
    "load.l l7"
    "i2l"->"load.l l7";
    "cmp.l"
    "load.l l7"->"cmp.l";
    "ifne inc.i $r10 1"
    "cmp.l"->"ifne inc.i $r10 1";
    "ifne inc.i $r10 1"->"load.r r0";
    "load.r r0"->"load.l l8";
    "load.l l8"->"push 0";
    "virtualinvoke <ImAlpha: void wrMem(long,int)>"
    "push 0"->"virtualinvoke <ImAlpha: void wrMem(long,int)>";
    "virtualinvoke <ImAlpha: void wrMem(long,int)>"->"staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "ifnonnull inc.i $r10 1"
    "staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>"->"ifnonnull inc.i $r10 1";
    "ifnonnull inc.i $r10 1"->"goto load.r r0";
    "goto load.r r0"->"load.r r0";
    "load.r r0"->"virtualinvoke <ImAlpha: void privileged()>";
    "goto return"
    "virtualinvoke <ImAlpha: void privileged()>"->"goto return";
    "inc.i $r10 1"
    "ifnonnull inc.i $r10 1"->"inc.i $r10 1";
    "goto load.i $r10"
    "inc.i $r10 1"->"goto load.i $r10";
    "virtualinvoke <java.awt.image.ColorConvertOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>"->"store.r $r10";
}
